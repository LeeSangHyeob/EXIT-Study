import java.io.*;

public class test {

    private static final int BLOCK_SIZE_SEED = 16;
    private static final int BLOCK_SIZE_SEED_INT = 4;
    private static final int READ_BLOCK_SIZE = 8192;

    public static void main(String[] args) throws IOException {

        int[] data;
        byte[] cdata;
        int nRetOutLeng[] = new int[] { 0 };
        int nPaddingLeng[] = new int[] { 0 };
        int j;
        byte[] result;
        byte[] message = null;
        int[] outbuf = new int[32];
        int process_blockLeng = 32;
        KISA_SEED_CBC.KISA_SEED_INFO info = null;
        int len;
        int nCipherTextLen = 0;
        byte[] inData = new byte[READ_BLOCK_SIZE];
        byte []newpbszCipherText = null;
        byte []pbszPlainText = null;

        String key = "kMVno2024Kbm@!bm";
        byte bszIV[] = {
                (byte)0x026, (byte)0x08d, (byte)0x066, (byte)0x0a7,
                (byte)0x035, (byte)0x0a8, (byte)0x01a, (byte)0x081,
                (byte)0x06f, (byte)0x0ba, (byte)0x0d9, (byte)0x0fa,
                (byte)0x036, (byte)0x016, (byte)0x025, (byte)0x001
        };

        byte[] seedKey = key.getBytes();

        InputStream is = new FileInputStream("/Users/isanghyeob/Downloads/11/SMSM34_FSAL4KBM_ID0001_T20240201000000.DAT");
        FileOutputStream fos = new FileOutputStream("/Users/isanghyeob/Downloads/TEST99.DAT");
        BufferedWriter bw = new BufferedWriter(new FileWriter("/Users/isanghyeob/Downloads/TEST98.DAT"));

        info = new KISA_SEED_CBC.KISA_SEED_INFO();
        KISA_SEED_CBC.SEED_CBC_init(info, KISA_SEED_CBC.KISA_ENC_DEC.KISA_DECRYPT, seedKey, bszIV);

        while((len = is.read(inData, 0, READ_BLOCK_SIZE)) != 0) {

            if(len < READ_BLOCK_SIZE) break;

            message = new byte[inData.length + 16];
            System.arraycopy(inData, 0, message, 0, inData.length);

            nCipherTextLen = message.length;

            if( (nCipherTextLen%BLOCK_SIZE_SEED) != 0 )
            {
                System.out.print("Decryption_FAIL! \n\n");
            }

            outbuf = new int[32];

            newpbszCipherText = new byte[nCipherTextLen];
            pbszPlainText = new byte[nCipherTextLen];


            for(j=0; j<nCipherTextLen - process_blockLeng; )
            {
                System.arraycopy(message, j, newpbszCipherText, 0, process_blockLeng);
                data = KISA_SEED_CBC.chartoint32_for_SEED_CBC(newpbszCipherText, process_blockLeng);
                KISA_SEED_CBC.SEED_CBC_Process( info, data, process_blockLeng, outbuf, nRetOutLeng );
                cdata = KISA_SEED_CBC.int32tochar_for_SEED_CBC(outbuf, nRetOutLeng[0]);
                System.arraycopy(cdata, 0, pbszPlainText, j, nRetOutLeng[0]);
                j += nRetOutLeng[0];
            }

            int remainleng =  nCipherTextLen%process_blockLeng;
            if(remainleng == 0)
            {
                remainleng = process_blockLeng;
            }
            System.arraycopy(message, j, newpbszCipherText, 0, remainleng);
            data = KISA_SEED_CBC.chartoint32_for_SEED_CBC(newpbszCipherText, remainleng);
            KISA_SEED_CBC.SEED_CBC_Process( info, data, remainleng, outbuf, nRetOutLeng );
            cdata = KISA_SEED_CBC.int32tochar_for_SEED_CBC(outbuf, nRetOutLeng[0]);
            System.arraycopy(cdata, 0, pbszPlainText, j, nRetOutLeng[0]);
            j += nRetOutLeng[0];


            fos.write(pbszPlainText);
            bw.write(new String(pbszPlainText, "EUC-KR"));

            if(KISA_SEED_CBC.SEED_CBC_Close( info, outbuf, nRetOutLeng[0], nPaddingLeng ) == 1)
            {
                cdata = KISA_SEED_CBC.int32tochar_for_SEED_CBC( outbuf, remainleng-nPaddingLeng[0] );

                byte[] newpbszPlainTexts = new byte[remainleng-nPaddingLeng[0]];

                KISA_SEED_CBC.Common.arraycopy(newpbszPlainTexts, cdata, remainleng-nPaddingLeng[0]);

                int message_length = remainleng-nPaddingLeng[0];

                result = new byte[message_length];
                System.arraycopy(newpbszPlainTexts, 0, result, 0, message_length);

                System.out.println(new String(result, "EUC-KR"));


                fos.write(result);
                bw.write(new String(result, "EUC-KR"));
                data = null;
                cdata = null;
                outbuf = null;

            }
            else
            {
                System.out.println("DECRYPT FAIL!! ");
            }

        }

        for(j=0; j<nCipherTextLen - process_blockLeng; )
        {
            System.arraycopy(message, j, newpbszCipherText, 0, process_blockLeng);
            data = KISA_SEED_CBC.chartoint32_for_SEED_CBC(newpbszCipherText, process_blockLeng);
            KISA_SEED_CBC.SEED_CBC_Process( info, data, process_blockLeng, outbuf, nRetOutLeng );
            cdata = KISA_SEED_CBC.int32tochar_for_SEED_CBC(outbuf, nRetOutLeng[0]);
            System.arraycopy(cdata, 0, pbszPlainText, j, nRetOutLeng[0]);
            j += nRetOutLeng[0];
        }

        int remainleng =  nCipherTextLen%process_blockLeng;
        if(remainleng == 0)
        {
            remainleng = process_blockLeng;
        }
        System.arraycopy(message, j, newpbszCipherText, 0, remainleng);
        data = KISA_SEED_CBC.chartoint32_for_SEED_CBC(newpbszCipherText, remainleng);
        KISA_SEED_CBC.SEED_CBC_Process( info, data, remainleng, outbuf, nRetOutLeng );
        cdata = KISA_SEED_CBC.int32tochar_for_SEED_CBC(outbuf, nRetOutLeng[0]);
        System.arraycopy(cdata, 0, pbszPlainText, j, nRetOutLeng[0]);
        j += nRetOutLeng[0];


        fos.write(pbszPlainText);
        bw.write(new String(pbszPlainText, "EUC-KR"));

        if(KISA_SEED_CBC.SEED_CBC_Close( info, outbuf, nRetOutLeng[0], nPaddingLeng ) == 1)
        {
            cdata = KISA_SEED_CBC.int32tochar_for_SEED_CBC( outbuf, remainleng-nPaddingLeng[0] );

            byte[] newpbszPlainTexts = new byte[remainleng-nPaddingLeng[0]];

            KISA_SEED_CBC.Common.arraycopy(newpbszPlainTexts, cdata, remainleng-nPaddingLeng[0]);

            int message_length = remainleng-nPaddingLeng[0];

            result = new byte[message_length];
            System.arraycopy(newpbszPlainTexts, 0, result, 0, message_length);

            System.out.println(new String(result, "EUC-KR"));


            fos.write(result);
            bw.write(new String(result, "EUC-KR"));
            data = null;
            cdata = null;
            outbuf = null;

        }
        else
        {
            System.out.println("DECRYPT FAIL!! ");
        }

        fos.close();
        is.close();
        bw.close();
;    }
}
